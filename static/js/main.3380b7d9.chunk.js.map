{"version":3,"sources":["components/ErrorBoundry.js","components/card.js","components/CardList.js","components/Scroll.js","components/searchbox.js","containers/app.js","serviceWorker.js","index.js"],"names":["Errorboundry","props","state","hasError","err","info","this","setState","children","React","Component","Card","nom","src","comm","className","alt","List","robots","map","robot","key","id","name","email","Scroll","style","overflowY","height","Searchbox","searchchange","type","onChange","placeholder","App","Onsearchchange","event","search","target","value","fetch","then","result","json","users","filterRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAmBeA,E,kDAhBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,UAAW,GAHD,E,8DAMAC,EAAIC,GAClBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAG1B,OAAOG,KAAKJ,MAAMC,SACf,wDACIG,KAAKL,MAAMO,a,GAbCC,IAAMC,WCSlBC,MATf,YAA+B,IAAhBC,EAAe,EAAfA,IAAIC,EAAW,EAAXA,IAAKC,EAAM,EAANA,KACpB,OAAO,yBAAKC,UAAU,uDAClB,yBAAKF,IAAG,+BAA0BA,EAA1B,YAAyCG,IAAI,KACrD,4BAAKJ,GACL,2BAAIE,KCaGG,EAfH,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEV,OAAQ,6BAEDA,EAAOC,KAAI,SAACC,GACZ,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAME,GACxBT,IAAKO,EAAME,GACXV,IAAKQ,EAAMG,KACXT,KAAMM,EAAMI,aCFTC,G,MARF,SAACxB,GACV,OACI,yBAAKyB,MAAO,CAACC,UAAY,SAASC,OAAS,UACtC3B,EAAMO,YCIJqB,EANC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OAAO,6BACH,2BAAOf,UAAU,mCAAmCgB,KAAK,SAASC,SAAUF,EAAcG,YAAY,oBCyC/FC,E,kDAtCX,aAAc,IAAD,8BACT,gBAaHC,eAAe,SAACC,GACZ,EAAK7B,SAAS,CAAC8B,OAAQD,EAAME,OAAOC,SAbrC,EAAKrC,MAAM,CACRgB,OAAQ,GACRmB,OAAQ,IAJF,E,gEAOO,IAAD,OAEfG,MAAM,8CACLC,MAAK,SAAAC,GAAM,OAAEA,EAAOC,UACpBF,MAAK,SAAAG,GAAQ,EAAKrC,SAAS,CAACW,OAAQ0B,S,+BAM/B,IAAD,OACCC,EAAevC,KAAKJ,MAAMgB,OAAO4B,QAAO,SAAA1B,GACrC,OAAOA,EAAMG,KAAKwB,cAAcC,SAAS,EAAK9C,MAAMmC,OAAOU,kBAGpE,OAAQzC,KAAKJ,MAAMgB,OAAO+B,OAGxB,yBAAKlC,UAAU,MACb,wBAAIA,UAAU,SAAd,iBACA,kBAAC,EAAD,CAAWe,aAAcxB,KAAK6B,iBAC/B,6BACA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMjB,OAAQ2B,OARjB,8C,GAxBMpC,IAAMC,WCKJwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3380b7d9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Errorboundry extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError : false\r\n        }\r\n    }\r\n    componentDidCatch(err,info){\r\n        this.setState({hasError : true});\r\n    }\r\n    render(){\r\n        return this.state.hasError ?\r\n           <h1>Oooops you have an error</h1> :\r\n               this.props.children\r\n           \r\n    }\r\n}\r\nexport default Errorboundry;","import React from 'react';\r\n\r\nfunction Card({nom,src, comm}){\r\n    return(<div className='tc bg-light-green dib br3 pa2 ma2 grow bw2 chadow-5'>\r\n        <img src={`https://robohash.org/${src}?200x200`} alt=\"\"></img>\r\n        <h2>{nom}</h2>\r\n        <p>{comm}</p>\r\n\r\n\r\n       </div>);\r\n}\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './card';\r\n\r\n const List=({robots})=>{\r\n    \r\n    return (<div>\r\n        {\r\n           robots.map((robot)=>{\r\n           return (<Card key={robot.id} \r\n            src={robot.id} \r\n            nom={robot.name} \r\n            comm={robot.email} />);})\r\n        }\r\n     </div>);\r\n}\r\n\r\n\r\n\r\nexport default List;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div style={{overflowY : 'scroll',height : '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n\r\nconst Searchbox=({searchchange})=>{\r\n    return(<div>\r\n        <input className='pa3 ba b--green bg-lightest-blue' type='search' onChange={searchchange} placeholder='Search robots'/>\r\n    </div>)\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\nimport Errorboundry from '../components/ErrorBoundry';\r\nimport List from '../components/CardList';\r\nimport './app.css';\r\nimport Scroll from '../components/Scroll';\r\nimport Searchbox from '../components/searchbox';\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n           robots: [],\r\n           search: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(result=>result.json())\r\n        .then(users=>{this.setState({robots: users })});\r\n    }\r\n\r\n     Onsearchchange=(event)=>{\r\n         this.setState({search: event.target.value})\r\n     }\r\n     render(){\r\n        const filterRobots = this.state.robots.filter(robot=> {\r\n                 return robot.name.toLowerCase().includes(this.state.search.toLowerCase());\r\n                });\r\n\r\n        return !this.state.robots.length ?\r\n            <h1>Loading...</h1> :\r\n          \r\n         (<div className='tc'>\r\n            <h1 className='tc f1'>Robot friends</h1>\r\n            <Searchbox searchchange={this.Onsearchchange}/>\r\n           <hr/>\r\n           <Scroll>\r\n             <Errorboundry>\r\n               <List robots={filterRobots} />\r\n             </Errorboundry>\r\n           </Scroll>\r\n         </div>);\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/app';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}